// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v4.25.3
// source: protobuf/media_analysis.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MediaType int32

const (
	MediaType_MEDIA_TYPE_UNSPECIFIED MediaType = 0
	MediaType_AUDIO                  MediaType = 1
	MediaType_VIDEO                  MediaType = 2
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_UNSPECIFIED",
		1: "AUDIO",
		2: "VIDEO",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_UNSPECIFIED": 0,
		"AUDIO":                  1,
		"VIDEO":                  2,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_media_analysis_proto_enumTypes[0].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_protobuf_media_analysis_proto_enumTypes[0]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{0}
}

type Platform int32

const (
	Platform_PLATFORM_UNSPECIFIED Platform = 0
	Platform_TIKTOK               Platform = 1
	Platform_INSTAGRAM_REELS      Platform = 2
	Platform_YOUTUBE_SHORTS       Platform = 3
	Platform_SNAPCHAT             Platform = 4
	Platform_X                    Platform = 5
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "PLATFORM_UNSPECIFIED",
		1: "TIKTOK",
		2: "INSTAGRAM_REELS",
		3: "YOUTUBE_SHORTS",
		4: "SNAPCHAT",
		5: "X",
	}
	Platform_value = map[string]int32{
		"PLATFORM_UNSPECIFIED": 0,
		"TIKTOK":               1,
		"INSTAGRAM_REELS":      2,
		"YOUTUBE_SHORTS":       3,
		"SNAPCHAT":             4,
		"X":                    5,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_media_analysis_proto_enumTypes[1].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_protobuf_media_analysis_proto_enumTypes[1]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{1}
}

type SummaryRequest_SummaryType int32

const (
	SummaryRequest_SUMMARY_TYPE_UNSPECIFIED SummaryRequest_SummaryType = 0
	SummaryRequest_BRIEF                    SummaryRequest_SummaryType = 1
	SummaryRequest_DETAILED                 SummaryRequest_SummaryType = 2
	SummaryRequest_BULLET_POINTS            SummaryRequest_SummaryType = 3
)

// Enum value maps for SummaryRequest_SummaryType.
var (
	SummaryRequest_SummaryType_name = map[int32]string{
		0: "SUMMARY_TYPE_UNSPECIFIED",
		1: "BRIEF",
		2: "DETAILED",
		3: "BULLET_POINTS",
	}
	SummaryRequest_SummaryType_value = map[string]int32{
		"SUMMARY_TYPE_UNSPECIFIED": 0,
		"BRIEF":                    1,
		"DETAILED":                 2,
		"BULLET_POINTS":            3,
	}
)

func (x SummaryRequest_SummaryType) Enum() *SummaryRequest_SummaryType {
	p := new(SummaryRequest_SummaryType)
	*p = x
	return p
}

func (x SummaryRequest_SummaryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SummaryRequest_SummaryType) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_media_analysis_proto_enumTypes[2].Descriptor()
}

func (SummaryRequest_SummaryType) Type() protoreflect.EnumType {
	return &file_protobuf_media_analysis_proto_enumTypes[2]
}

func (x SummaryRequest_SummaryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SummaryRequest_SummaryType.Descriptor instead.
func (SummaryRequest_SummaryType) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{16, 0}
}

type BaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MediaUrl      string                 `protobuf:"bytes,1,opt,name=media_url,json=mediaUrl,proto3" json:"media_url,omitempty"`
	Bucket        string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	MediaType     MediaType              `protobuf:"varint,3,opt,name=media_type,json=mediaType,proto3,enum=media_analysis.MediaType" json:"media_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *BaseRequest) GetMediaUrl() string {
	if x != nil {
		return x.MediaUrl
	}
	return ""
}

func (x *BaseRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BaseRequest) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

type TranscriptRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Base                     *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	LanguageCode             string                 `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	EnableSpeakerDiarization bool                   `protobuf:"varint,3,opt,name=enable_speaker_diarization,json=enableSpeakerDiarization,proto3" json:"enable_speaker_diarization,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TranscriptRequest) Reset() {
	*x = TranscriptRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptRequest) ProtoMessage() {}

func (x *TranscriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptRequest.ProtoReflect.Descriptor instead.
func (*TranscriptRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *TranscriptRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TranscriptRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *TranscriptRequest) GetEnableSpeakerDiarization() bool {
	if x != nil {
		return x.EnableSpeakerDiarization
	}
	return false
}

type TranscriptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TranscriptUrl string                 `protobuf:"bytes,1,opt,name=transcript_url,json=transcriptUrl,proto3" json:"transcript_url,omitempty"`
	// repeated SpeakerSegment segments = 2;
	Error         string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscriptResponse) Reset() {
	*x = TranscriptResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptResponse) ProtoMessage() {}

func (x *TranscriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptResponse.ProtoReflect.Descriptor instead.
func (*TranscriptResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *TranscriptResponse) GetTranscriptUrl() string {
	if x != nil {
		return x.TranscriptUrl
	}
	return ""
}

func (x *TranscriptResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SpeakerSegment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpeakerId     string                 `protobuf:"bytes,1,opt,name=speaker_id,json=speakerId,proto3" json:"speaker_id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	StartTime     float32                `protobuf:"fixed32,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       float32                `protobuf:"fixed32,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Confidence    float32                `protobuf:"fixed32,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpeakerSegment) Reset() {
	*x = SpeakerSegment{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpeakerSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeakerSegment) ProtoMessage() {}

func (x *SpeakerSegment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeakerSegment.ProtoReflect.Descriptor instead.
func (*SpeakerSegment) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{3}
}

func (x *SpeakerSegment) GetSpeakerId() string {
	if x != nil {
		return x.SpeakerId
	}
	return ""
}

func (x *SpeakerSegment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SpeakerSegment) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SpeakerSegment) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SpeakerSegment) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type KeyMomentsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Base               *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	MomentTypes        []string               `protobuf:"bytes,2,rep,name=moment_types,json=momentTypes,proto3" json:"moment_types,omitempty"`
	MinSegmentDuration float32                `protobuf:"fixed32,3,opt,name=min_segment_duration,json=minSegmentDuration,proto3" json:"min_segment_duration,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KeyMomentsRequest) Reset() {
	*x = KeyMomentsRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyMomentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMomentsRequest) ProtoMessage() {}

func (x *KeyMomentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMomentsRequest.ProtoReflect.Descriptor instead.
func (*KeyMomentsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{4}
}

func (x *KeyMomentsRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *KeyMomentsRequest) GetMomentTypes() []string {
	if x != nil {
		return x.MomentTypes
	}
	return nil
}

func (x *KeyMomentsRequest) GetMinSegmentDuration() float32 {
	if x != nil {
		return x.MinSegmentDuration
	}
	return 0
}

type KeyMoment struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Text            string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Start           float32                `protobuf:"fixed32,2,opt,name=start,proto3" json:"start,omitempty"`
	End             float32                `protobuf:"fixed32,3,opt,name=end,proto3" json:"end,omitempty"`
	Type            string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Confidence      float32                `protobuf:"fixed32,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
	ValidationScore float32                `protobuf:"fixed32,6,opt,name=validation_score,json=validationScore,proto3" json:"validation_score,omitempty"` // repeated string tags = 6;
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *KeyMoment) Reset() {
	*x = KeyMoment{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMoment) ProtoMessage() {}

func (x *KeyMoment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMoment.ProtoReflect.Descriptor instead.
func (*KeyMoment) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{5}
}

func (x *KeyMoment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *KeyMoment) GetStart() float32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *KeyMoment) GetEnd() float32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *KeyMoment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KeyMoment) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *KeyMoment) GetValidationScore() float32 {
	if x != nil {
		return x.ValidationScore
	}
	return 0
}

type KeyMomentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Moments       []*KeyMoment           `protobuf:"bytes,1,rep,name=moments,proto3" json:"moments,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyMomentsResponse) Reset() {
	*x = KeyMomentsResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyMomentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMomentsResponse) ProtoMessage() {}

func (x *KeyMomentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMomentsResponse.ProtoReflect.Descriptor instead.
func (*KeyMomentsResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{6}
}

func (x *KeyMomentsResponse) GetMoments() []*KeyMoment {
	if x != nil {
		return x.Moments
	}
	return nil
}

func (x *KeyMomentsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TopicAnalysisRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	MaxTopics     int32                  `protobuf:"varint,2,opt,name=max_topics,json=maxTopics,proto3" json:"max_topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicAnalysisRequest) Reset() {
	*x = TopicAnalysisRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicAnalysisRequest) ProtoMessage() {}

func (x *TopicAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicAnalysisRequest.ProtoReflect.Descriptor instead.
func (*TopicAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{7}
}

func (x *TopicAnalysisRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TopicAnalysisRequest) GetMaxTopics() int32 {
	if x != nil {
		return x.MaxTopics
	}
	return 0
}

type Topic struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamps     []float32              `protobuf:"fixed32,2,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"` // when this topic appears
	RelevanceScore float32                `protobuf:"fixed32,3,opt,name=relevance_score,json=relevanceScore,proto3" json:"relevance_score,omitempty"`
	RelatedTerms   []string               `protobuf:"bytes,4,rep,name=related_terms,json=relatedTerms,proto3" json:"related_terms,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Topic) Reset() {
	*x = Topic{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{8}
}

func (x *Topic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topic) GetTimestamps() []float32 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Topic) GetRelevanceScore() float32 {
	if x != nil {
		return x.RelevanceScore
	}
	return 0
}

func (x *Topic) GetRelatedTerms() []string {
	if x != nil {
		return x.RelatedTerms
	}
	return nil
}

type TopicAnalysisResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []*Topic               `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicAnalysisResponse) Reset() {
	*x = TopicAnalysisResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicAnalysisResponse) ProtoMessage() {}

func (x *TopicAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicAnalysisResponse.ProtoReflect.Descriptor instead.
func (*TopicAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{9}
}

func (x *TopicAnalysisResponse) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *TopicAnalysisResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SentimentRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Base            *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentInterval float32                `protobuf:"fixed32,2,opt,name=segment_interval,json=segmentInterval,proto3" json:"segment_interval,omitempty"` // analyze sentiment every X seconds
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SentimentRequest) Reset() {
	*x = SentimentRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentRequest) ProtoMessage() {}

func (x *SentimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentRequest.ProtoReflect.Descriptor instead.
func (*SentimentRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{10}
}

func (x *SentimentRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SentimentRequest) GetSegmentInterval() float32 {
	if x != nil {
		return x.SegmentInterval
	}
	return 0
}

type SentimentSegment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     float32                `protobuf:"fixed32,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       float32                `protobuf:"fixed32,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PositiveScore float32                `protobuf:"fixed32,3,opt,name=positive_score,json=positiveScore,proto3" json:"positive_score,omitempty"`
	NegativeScore float32                `protobuf:"fixed32,4,opt,name=negative_score,json=negativeScore,proto3" json:"negative_score,omitempty"`
	NeutralScore  float32                `protobuf:"fixed32,5,opt,name=neutral_score,json=neutralScore,proto3" json:"neutral_score,omitempty"`
	EmotionLabels []string               `protobuf:"bytes,6,rep,name=emotion_labels,json=emotionLabels,proto3" json:"emotion_labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentimentSegment) Reset() {
	*x = SentimentSegment{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentSegment) ProtoMessage() {}

func (x *SentimentSegment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentSegment.ProtoReflect.Descriptor instead.
func (*SentimentSegment) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{11}
}

func (x *SentimentSegment) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SentimentSegment) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SentimentSegment) GetPositiveScore() float32 {
	if x != nil {
		return x.PositiveScore
	}
	return 0
}

func (x *SentimentSegment) GetNegativeScore() float32 {
	if x != nil {
		return x.NegativeScore
	}
	return 0
}

func (x *SentimentSegment) GetNeutralScore() float32 {
	if x != nil {
		return x.NeutralScore
	}
	return 0
}

func (x *SentimentSegment) GetEmotionLabels() []string {
	if x != nil {
		return x.EmotionLabels
	}
	return nil
}

type SentimentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Segments      []*SentimentSegment    `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentimentResponse) Reset() {
	*x = SentimentResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentResponse) ProtoMessage() {}

func (x *SentimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentResponse.ProtoReflect.Descriptor instead.
func (*SentimentResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{12}
}

func (x *SentimentResponse) GetSegments() []*SentimentSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SentimentResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ChapterRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Base            *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	MinChapterCount int32                  `protobuf:"varint,2,opt,name=min_chapter_count,json=minChapterCount,proto3" json:"min_chapter_count,omitempty"`
	MaxChapterCount int32                  `protobuf:"varint,3,opt,name=max_chapter_count,json=maxChapterCount,proto3" json:"max_chapter_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChapterRequest) Reset() {
	*x = ChapterRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChapterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterRequest) ProtoMessage() {}

func (x *ChapterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterRequest.ProtoReflect.Descriptor instead.
func (*ChapterRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{13}
}

func (x *ChapterRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ChapterRequest) GetMinChapterCount() int32 {
	if x != nil {
		return x.MinChapterCount
	}
	return 0
}

func (x *ChapterRequest) GetMaxChapterCount() int32 {
	if x != nil {
		return x.MaxChapterCount
	}
	return 0
}

type Chapter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	StartTime     float32                `protobuf:"fixed32,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       float32                `protobuf:"fixed32,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Keywords      []string               `protobuf:"bytes,5,rep,name=keywords,proto3" json:"keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{14}
}

func (x *Chapter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Chapter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Chapter) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Chapter) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Chapter) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type ChapterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chapters      []*Chapter             `protobuf:"bytes,1,rep,name=chapters,proto3" json:"chapters,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChapterResponse) Reset() {
	*x = ChapterResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChapterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterResponse) ProtoMessage() {}

func (x *ChapterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterResponse.ProtoReflect.Descriptor instead.
func (*ChapterResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{15}
}

func (x *ChapterResponse) GetChapters() []*Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *ChapterResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SummaryRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Base          *BaseRequest               `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SummaryType   SummaryRequest_SummaryType `protobuf:"varint,2,opt,name=summary_type,json=summaryType,proto3,enum=media_analysis.SummaryRequest_SummaryType" json:"summary_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryRequest) Reset() {
	*x = SummaryRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryRequest) ProtoMessage() {}

func (x *SummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryRequest.ProtoReflect.Descriptor instead.
func (*SummaryRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{16}
}

func (x *SummaryRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SummaryRequest) GetSummaryType() SummaryRequest_SummaryType {
	if x != nil {
		return x.SummaryType
	}
	return SummaryRequest_SUMMARY_TYPE_UNSPECIFIED
}

type SummaryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Summary       string                 `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	KeyPoints     []string               `protobuf:"bytes,2,rep,name=key_points,json=keyPoints,proto3" json:"key_points,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummaryResponse) Reset() {
	*x = SummaryResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryResponse) ProtoMessage() {}

func (x *SummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryResponse.ProtoReflect.Descriptor instead.
func (*SummaryResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{17}
}

func (x *SummaryResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *SummaryResponse) GetKeyPoints() []string {
	if x != nil {
		return x.KeyPoints
	}
	return nil
}

func (x *SummaryResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ShortFormRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Base                   *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	TargetPlatforms        []Platform             `protobuf:"varint,2,rep,packed,name=target_platforms,json=targetPlatforms,proto3,enum=media_analysis.Platform" json:"target_platforms,omitempty"`
	DesiredDurationSeconds int32                  `protobuf:"varint,3,opt,name=desired_duration_seconds,json=desiredDurationSeconds,proto3" json:"desired_duration_seconds,omitempty"`
	FocusKeywords          []string               `protobuf:"bytes,4,rep,name=focus_keywords,json=focusKeywords,proto3" json:"focus_keywords,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ShortFormRequest) Reset() {
	*x = ShortFormRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShortFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortFormRequest) ProtoMessage() {}

func (x *ShortFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortFormRequest.ProtoReflect.Descriptor instead.
func (*ShortFormRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{18}
}

func (x *ShortFormRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ShortFormRequest) GetTargetPlatforms() []Platform {
	if x != nil {
		return x.TargetPlatforms
	}
	return nil
}

func (x *ShortFormRequest) GetDesiredDurationSeconds() int32 {
	if x != nil {
		return x.DesiredDurationSeconds
	}
	return 0
}

func (x *ShortFormRequest) GetFocusKeywords() []string {
	if x != nil {
		return x.FocusKeywords
	}
	return nil
}

type ShortFormResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clips         []*ShortFormClip       `protobuf:"bytes,1,rep,name=clips,proto3" json:"clips,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShortFormResponse) Reset() {
	*x = ShortFormResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShortFormResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortFormResponse) ProtoMessage() {}

func (x *ShortFormResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortFormResponse.ProtoReflect.Descriptor instead.
func (*ShortFormResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{19}
}

func (x *ShortFormResponse) GetClips() []*ShortFormClip {
	if x != nil {
		return x.Clips
	}
	return nil
}

func (x *ShortFormResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ShortFormClip struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	StartTime           float32                `protobuf:"fixed32,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             float32                `protobuf:"fixed32,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SuggestedCaption    string                 `protobuf:"bytes,3,opt,name=suggested_caption,json=suggestedCaption,proto3" json:"suggested_caption,omitempty"`
	SuggestedHashtags   []string               `protobuf:"bytes,4,rep,name=suggested_hashtags,json=suggestedHashtags,proto3" json:"suggested_hashtags,omitempty"`
	RecommendedPlatform Platform               `protobuf:"varint,5,opt,name=recommended_platform,json=recommendedPlatform,proto3,enum=media_analysis.Platform" json:"recommended_platform,omitempty"`
	EngagementScore     float32                `protobuf:"fixed32,6,opt,name=engagement_score,json=engagementScore,proto3" json:"engagement_score,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ShortFormClip) Reset() {
	*x = ShortFormClip{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShortFormClip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortFormClip) ProtoMessage() {}

func (x *ShortFormClip) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortFormClip.ProtoReflect.Descriptor instead.
func (*ShortFormClip) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{20}
}

func (x *ShortFormClip) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ShortFormClip) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ShortFormClip) GetSuggestedCaption() string {
	if x != nil {
		return x.SuggestedCaption
	}
	return ""
}

func (x *ShortFormClip) GetSuggestedHashtags() []string {
	if x != nil {
		return x.SuggestedHashtags
	}
	return nil
}

func (x *ShortFormClip) GetRecommendedPlatform() Platform {
	if x != nil {
		return x.RecommendedPlatform
	}
	return Platform_PLATFORM_UNSPECIFIED
}

func (x *ShortFormClip) GetEngagementScore() float32 {
	if x != nil {
		return x.EngagementScore
	}
	return 0
}

type QuoteExtractionRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Base                  *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	IncludeContext        bool                   `protobuf:"varint,2,opt,name=include_context,json=includeContext,proto3" json:"include_context,omitempty"`
	MinQuoteLengthSeconds float32                `protobuf:"fixed32,3,opt,name=min_quote_length_seconds,json=minQuoteLengthSeconds,proto3" json:"min_quote_length_seconds,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QuoteExtractionRequest) Reset() {
	*x = QuoteExtractionRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteExtractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteExtractionRequest) ProtoMessage() {}

func (x *QuoteExtractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteExtractionRequest.ProtoReflect.Descriptor instead.
func (*QuoteExtractionRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{21}
}

func (x *QuoteExtractionRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *QuoteExtractionRequest) GetIncludeContext() bool {
	if x != nil {
		return x.IncludeContext
	}
	return false
}

func (x *QuoteExtractionRequest) GetMinQuoteLengthSeconds() float32 {
	if x != nil {
		return x.MinQuoteLengthSeconds
	}
	return 0
}

type Quote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	StartTime     float32                `protobuf:"fixed32,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       float32                `protobuf:"fixed32,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Speaker       string                 `protobuf:"bytes,4,opt,name=speaker,proto3" json:"speaker,omitempty"`
	Context       string                 `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	ImpactScore   float32                `protobuf:"fixed32,6,opt,name=impact_score,json=impactScore,proto3" json:"impact_score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quote) Reset() {
	*x = Quote{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{22}
}

func (x *Quote) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Quote) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Quote) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Quote) GetSpeaker() string {
	if x != nil {
		return x.Speaker
	}
	return ""
}

func (x *Quote) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *Quote) GetImpactScore() float32 {
	if x != nil {
		return x.ImpactScore
	}
	return 0
}

type QuoteExtractionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Quotes        []*Quote               `protobuf:"bytes,1,rep,name=quotes,proto3" json:"quotes,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuoteExtractionResponse) Reset() {
	*x = QuoteExtractionResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuoteExtractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteExtractionResponse) ProtoMessage() {}

func (x *QuoteExtractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteExtractionResponse.ProtoReflect.Descriptor instead.
func (*QuoteExtractionResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{23}
}

func (x *QuoteExtractionResponse) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *QuoteExtractionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type MetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	AnalyzeVisual bool                   `protobuf:"varint,2,opt,name=analyze_visual,json=analyzeVisual,proto3" json:"analyze_visual,omitempty"`
	AnalyzeAudio  bool                   `protobuf:"varint,3,opt,name=analyze_audio,json=analyzeAudio,proto3" json:"analyze_audio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataRequest) Reset() {
	*x = MetadataRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataRequest) ProtoMessage() {}

func (x *MetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataRequest.ProtoReflect.Descriptor instead.
func (*MetadataRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{24}
}

func (x *MetadataRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MetadataRequest) GetAnalyzeVisual() bool {
	if x != nil {
		return x.AnalyzeVisual
	}
	return false
}

func (x *MetadataRequest) GetAnalyzeAudio() bool {
	if x != nil {
		return x.AnalyzeAudio
	}
	return false
}

type Metadata struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SuggestedTags     []string               `protobuf:"bytes,1,rep,name=suggested_tags,json=suggestedTags,proto3" json:"suggested_tags,omitempty"`
	Categories        []string               `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
	ContentRating     string                 `protobuf:"bytes,3,opt,name=content_rating,json=contentRating,proto3" json:"content_rating,omitempty"`
	Language          string                 `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	DetectedBrands    []string               `protobuf:"bytes,5,rep,name=detected_brands,json=detectedBrands,proto3" json:"detected_brands,omitempty"`
	DetectedLocations []string               `protobuf:"bytes,6,rep,name=detected_locations,json=detectedLocations,proto3" json:"detected_locations,omitempty"`
	TechnicalInfo     map[string]string      `protobuf:"bytes,7,rep,name=technical_info,json=technicalInfo,proto3" json:"technical_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ContentWarnings   []string               `protobuf:"bytes,8,rep,name=content_warnings,json=contentWarnings,proto3" json:"content_warnings,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{25}
}

func (x *Metadata) GetSuggestedTags() []string {
	if x != nil {
		return x.SuggestedTags
	}
	return nil
}

func (x *Metadata) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Metadata) GetContentRating() string {
	if x != nil {
		return x.ContentRating
	}
	return ""
}

func (x *Metadata) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Metadata) GetDetectedBrands() []string {
	if x != nil {
		return x.DetectedBrands
	}
	return nil
}

func (x *Metadata) GetDetectedLocations() []string {
	if x != nil {
		return x.DetectedLocations
	}
	return nil
}

func (x *Metadata) GetTechnicalInfo() map[string]string {
	if x != nil {
		return x.TechnicalInfo
	}
	return nil
}

func (x *Metadata) GetContentWarnings() []string {
	if x != nil {
		return x.ContentWarnings
	}
	return nil
}

type MetadataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *Metadata              `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataResponse) Reset() {
	*x = MetadataResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataResponse) ProtoMessage() {}

func (x *MetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataResponse.ProtoReflect.Descriptor instead.
func (*MetadataResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{26}
}

func (x *MetadataResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MetadataResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SoundscapeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	DetectMusic   bool                   `protobuf:"varint,2,opt,name=detect_music,json=detectMusic,proto3" json:"detect_music,omitempty"`
	DetectAmbient bool                   `protobuf:"varint,3,opt,name=detect_ambient,json=detectAmbient,proto3" json:"detect_ambient,omitempty"`
	DetectEffects bool                   `protobuf:"varint,4,opt,name=detect_effects,json=detectEffects,proto3" json:"detect_effects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SoundscapeRequest) Reset() {
	*x = SoundscapeRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoundscapeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundscapeRequest) ProtoMessage() {}

func (x *SoundscapeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundscapeRequest.ProtoReflect.Descriptor instead.
func (*SoundscapeRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{27}
}

func (x *SoundscapeRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SoundscapeRequest) GetDetectMusic() bool {
	if x != nil {
		return x.DetectMusic
	}
	return false
}

func (x *SoundscapeRequest) GetDetectAmbient() bool {
	if x != nil {
		return x.DetectAmbient
	}
	return false
}

func (x *SoundscapeRequest) GetDetectEffects() bool {
	if x != nil {
		return x.DetectEffects
	}
	return false
}

type SoundElement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	StartTime     float32                `protobuf:"fixed32,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       float32                `protobuf:"fixed32,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Confidence    float32                `protobuf:"fixed32,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Attributes    map[string]float32     `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SoundElement) Reset() {
	*x = SoundElement{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoundElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundElement) ProtoMessage() {}

func (x *SoundElement) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundElement.ProtoReflect.Descriptor instead.
func (*SoundElement) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{28}
}

func (x *SoundElement) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SoundElement) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SoundElement) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SoundElement) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *SoundElement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SoundElement) GetAttributes() map[string]float32 {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SoundscapeResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Elements             []*SoundElement        `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	BackgroundNoiseLevel float32                `protobuf:"fixed32,2,opt,name=background_noise_level,json=backgroundNoiseLevel,proto3" json:"background_noise_level,omitempty"`
	MusicGenres          []string               `protobuf:"bytes,3,rep,name=music_genres,json=musicGenres,proto3" json:"music_genres,omitempty"`
	AudioQualityScore    string                 `protobuf:"bytes,4,opt,name=audio_quality_score,json=audioQualityScore,proto3" json:"audio_quality_score,omitempty"`
	Error                string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SoundscapeResponse) Reset() {
	*x = SoundscapeResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SoundscapeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundscapeResponse) ProtoMessage() {}

func (x *SoundscapeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundscapeResponse.ProtoReflect.Descriptor instead.
func (*SoundscapeResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{29}
}

func (x *SoundscapeResponse) GetElements() []*SoundElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *SoundscapeResponse) GetBackgroundNoiseLevel() float32 {
	if x != nil {
		return x.BackgroundNoiseLevel
	}
	return 0
}

func (x *SoundscapeResponse) GetMusicGenres() []string {
	if x != nil {
		return x.MusicGenres
	}
	return nil
}

func (x *SoundscapeResponse) GetAudioQualityScore() string {
	if x != nil {
		return x.AudioQualityScore
	}
	return ""
}

func (x *SoundscapeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EngagementRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Base            *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SegmentInterval float32                `protobuf:"fixed32,2,opt,name=segment_interval,json=segmentInterval,proto3" json:"segment_interval,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EngagementRequest) Reset() {
	*x = EngagementRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngagementRequest) ProtoMessage() {}

func (x *EngagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngagementRequest.ProtoReflect.Descriptor instead.
func (*EngagementRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{30}
}

func (x *EngagementRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *EngagementRequest) GetSegmentInterval() float32 {
	if x != nil {
		return x.SegmentInterval
	}
	return 0
}

type EngagementMetrics struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	StartTime         float32                `protobuf:"fixed32,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           float32                `protobuf:"fixed32,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AttentionScore    float32                `protobuf:"fixed32,3,opt,name=attention_score,json=attentionScore,proto3" json:"attention_score,omitempty"`
	EmotionalImpact   float32                `protobuf:"fixed32,4,opt,name=emotional_impact,json=emotionalImpact,proto3" json:"emotional_impact,omitempty"`
	MemorabilityScore float32                `protobuf:"fixed32,5,opt,name=memorability_score,json=memorabilityScore,proto3" json:"memorability_score,omitempty"`
	EngagementFactors []string               `protobuf:"bytes,6,rep,name=engagement_factors,json=engagementFactors,proto3" json:"engagement_factors,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EngagementMetrics) Reset() {
	*x = EngagementMetrics{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngagementMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngagementMetrics) ProtoMessage() {}

func (x *EngagementMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngagementMetrics.ProtoReflect.Descriptor instead.
func (*EngagementMetrics) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{31}
}

func (x *EngagementMetrics) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *EngagementMetrics) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *EngagementMetrics) GetAttentionScore() float32 {
	if x != nil {
		return x.AttentionScore
	}
	return 0
}

func (x *EngagementMetrics) GetEmotionalImpact() float32 {
	if x != nil {
		return x.EmotionalImpact
	}
	return 0
}

func (x *EngagementMetrics) GetMemorabilityScore() float32 {
	if x != nil {
		return x.MemorabilityScore
	}
	return 0
}

func (x *EngagementMetrics) GetEngagementFactors() []string {
	if x != nil {
		return x.EngagementFactors
	}
	return nil
}

type EngagementResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Segments               []*EngagementMetrics   `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	OverallEngagementScore float32                `protobuf:"fixed32,2,opt,name=overall_engagement_score,json=overallEngagementScore,proto3" json:"overall_engagement_score,omitempty"`
	ImprovementSuggestions []string               `protobuf:"bytes,3,rep,name=improvement_suggestions,json=improvementSuggestions,proto3" json:"improvement_suggestions,omitempty"`
	Error                  string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *EngagementResponse) Reset() {
	*x = EngagementResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngagementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngagementResponse) ProtoMessage() {}

func (x *EngagementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngagementResponse.ProtoReflect.Descriptor instead.
func (*EngagementResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{32}
}

func (x *EngagementResponse) GetSegments() []*EngagementMetrics {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *EngagementResponse) GetOverallEngagementScore() float32 {
	if x != nil {
		return x.OverallEngagementScore
	}
	return 0
}

func (x *EngagementResponse) GetImprovementSuggestions() []string {
	if x != nil {
		return x.ImprovementSuggestions
	}
	return nil
}

func (x *EngagementResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FaceEmotionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Base             *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	SamplingRate     float32                `protobuf:"fixed32,2,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"` // analysis frequency in seconds
	TrackIndividuals bool                   `protobuf:"varint,3,opt,name=track_individuals,json=trackIndividuals,proto3" json:"track_individuals,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FaceEmotionRequest) Reset() {
	*x = FaceEmotionRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceEmotionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceEmotionRequest) ProtoMessage() {}

func (x *FaceEmotionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceEmotionRequest.ProtoReflect.Descriptor instead.
func (*FaceEmotionRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{33}
}

func (x *FaceEmotionRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *FaceEmotionRequest) GetSamplingRate() float32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

func (x *FaceEmotionRequest) GetTrackIndividuals() bool {
	if x != nil {
		return x.TrackIndividuals
	}
	return false
}

type FaceEmotion struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PersonId            string                 `protobuf:"bytes,1,opt,name=person_id,json=personId,proto3" json:"person_id,omitempty"` // if tracking individuals
	StartTime           float32                `protobuf:"fixed32,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             float32                `protobuf:"fixed32,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	EmotionScores       map[string]float32     `protobuf:"bytes,4,rep,name=emotion_scores,json=emotionScores,proto3" json:"emotion_scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	DetectedExpressions []string               `protobuf:"bytes,5,rep,name=detected_expressions,json=detectedExpressions,proto3" json:"detected_expressions,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FaceEmotion) Reset() {
	*x = FaceEmotion{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceEmotion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceEmotion) ProtoMessage() {}

func (x *FaceEmotion) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceEmotion.ProtoReflect.Descriptor instead.
func (*FaceEmotion) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{34}
}

func (x *FaceEmotion) GetPersonId() string {
	if x != nil {
		return x.PersonId
	}
	return ""
}

func (x *FaceEmotion) GetStartTime() float32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FaceEmotion) GetEndTime() float32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FaceEmotion) GetEmotionScores() map[string]float32 {
	if x != nil {
		return x.EmotionScores
	}
	return nil
}

func (x *FaceEmotion) GetDetectedExpressions() []string {
	if x != nil {
		return x.DetectedExpressions
	}
	return nil
}

type FaceEmotionResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Emotions           []*FaceEmotion         `protobuf:"bytes,1,rep,name=emotions,proto3" json:"emotions,omitempty"`
	PersonDescriptions map[string]string      `protobuf:"bytes,2,rep,name=person_descriptions,json=personDescriptions,proto3" json:"person_descriptions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // if tracking individuals
	Error              string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FaceEmotionResponse) Reset() {
	*x = FaceEmotionResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceEmotionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceEmotionResponse) ProtoMessage() {}

func (x *FaceEmotionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceEmotionResponse.ProtoReflect.Descriptor instead.
func (*FaceEmotionResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{35}
}

func (x *FaceEmotionResponse) GetEmotions() []*FaceEmotion {
	if x != nil {
		return x.Emotions
	}
	return nil
}

func (x *FaceEmotionResponse) GetPersonDescriptions() map[string]string {
	if x != nil {
		return x.PersonDescriptions
	}
	return nil
}

func (x *FaceEmotionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ContentWarningRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Base             *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	CustomCategories []string               `protobuf:"bytes,2,rep,name=custom_categories,json=customCategories,proto3" json:"custom_categories,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContentWarningRequest) Reset() {
	*x = ContentWarningRequest{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentWarningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentWarningRequest) ProtoMessage() {}

func (x *ContentWarningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentWarningRequest.ProtoReflect.Descriptor instead.
func (*ContentWarningRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{36}
}

func (x *ContentWarningRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ContentWarningRequest) GetCustomCategories() []string {
	if x != nil {
		return x.CustomCategories
	}
	return nil
}

type ContentWarning struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      string                 `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Severity      float32                `protobuf:"fixed32,2,opt,name=severity,proto3" json:"severity,omitempty"`
	Timestamps    []float32              `protobuf:"fixed32,3,rep,packed,name=timestamps,proto3" json:"timestamps,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContentWarning) Reset() {
	*x = ContentWarning{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentWarning) ProtoMessage() {}

func (x *ContentWarning) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentWarning.ProtoReflect.Descriptor instead.
func (*ContentWarning) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{37}
}

func (x *ContentWarning) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ContentWarning) GetSeverity() float32 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *ContentWarning) GetTimestamps() []float32 {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *ContentWarning) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ContentWarningResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Warnings         []*ContentWarning      `protobuf:"bytes,1,rep,name=warnings,proto3" json:"warnings,omitempty"`
	AgeRating        string                 `protobuf:"bytes,2,opt,name=age_rating,json=ageRating,proto3" json:"age_rating,omitempty"`
	ViewerAdvisories []string               `protobuf:"bytes,3,rep,name=viewer_advisories,json=viewerAdvisories,proto3" json:"viewer_advisories,omitempty"`
	Error            string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContentWarningResponse) Reset() {
	*x = ContentWarningResponse{}
	mi := &file_protobuf_media_analysis_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentWarningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentWarningResponse) ProtoMessage() {}

func (x *ContentWarningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_media_analysis_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentWarningResponse.ProtoReflect.Descriptor instead.
func (*ContentWarningResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_media_analysis_proto_rawDescGZIP(), []int{38}
}

func (x *ContentWarningResponse) GetWarnings() []*ContentWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ContentWarningResponse) GetAgeRating() string {
	if x != nil {
		return x.AgeRating
	}
	return ""
}

func (x *ContentWarningResponse) GetViewerAdvisories() []string {
	if x != nil {
		return x.ViewerAdvisories
	}
	return nil
}

func (x *ContentWarningResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_protobuf_media_analysis_proto protoreflect.FileDescriptor

var file_protobuf_media_analysis_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22,
	0x7c, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x4b,
	0x65, 0x79, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x5f, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x66, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x15, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x6e, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x67, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x97, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe9, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x52, 0x49, 0x45,
	0x46, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x53, 0x10, 0x03, 0x22, 0x60, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x5e, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x43, 0x6c, 0x69, 0x70, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x43, 0x6c, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x67, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0xac, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x5e, 0x0a, 0x17, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x8e, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x22, 0xad, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x52, 0x0a, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x40,
	0x0a, 0x12, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5e, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xb5, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x0c, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x12, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x11, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xff, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x67, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x45, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x67, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x69, 0x6d, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x46, 0x61, 0x63,
	0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x75, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x3d,
	0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x2a, 0x6e, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x4b, 0x54, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x45,
	0x4c, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x4f, 0x55, 0x54, 0x55, 0x42, 0x45, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50,
	0x43, 0x48, 0x41, 0x54, 0x10, 0x04, 0x12, 0x05, 0x0a, 0x01, 0x58, 0x10, 0x05, 0x32, 0xc1, 0x09,
	0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x4d,
	0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_media_analysis_proto_rawDescOnce sync.Once
	file_protobuf_media_analysis_proto_rawDescData = file_protobuf_media_analysis_proto_rawDesc
)

func file_protobuf_media_analysis_proto_rawDescGZIP() []byte {
	file_protobuf_media_analysis_proto_rawDescOnce.Do(func() {
		file_protobuf_media_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_media_analysis_proto_rawDescData)
	})
	return file_protobuf_media_analysis_proto_rawDescData
}

var file_protobuf_media_analysis_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protobuf_media_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_protobuf_media_analysis_proto_goTypes = []any{
	(MediaType)(0),                  // 0: media_analysis.MediaType
	(Platform)(0),                   // 1: media_analysis.Platform
	(SummaryRequest_SummaryType)(0), // 2: media_analysis.SummaryRequest.SummaryType
	(*BaseRequest)(nil),             // 3: media_analysis.BaseRequest
	(*TranscriptRequest)(nil),       // 4: media_analysis.TranscriptRequest
	(*TranscriptResponse)(nil),      // 5: media_analysis.TranscriptResponse
	(*SpeakerSegment)(nil),          // 6: media_analysis.SpeakerSegment
	(*KeyMomentsRequest)(nil),       // 7: media_analysis.KeyMomentsRequest
	(*KeyMoment)(nil),               // 8: media_analysis.KeyMoment
	(*KeyMomentsResponse)(nil),      // 9: media_analysis.KeyMomentsResponse
	(*TopicAnalysisRequest)(nil),    // 10: media_analysis.TopicAnalysisRequest
	(*Topic)(nil),                   // 11: media_analysis.Topic
	(*TopicAnalysisResponse)(nil),   // 12: media_analysis.TopicAnalysisResponse
	(*SentimentRequest)(nil),        // 13: media_analysis.SentimentRequest
	(*SentimentSegment)(nil),        // 14: media_analysis.SentimentSegment
	(*SentimentResponse)(nil),       // 15: media_analysis.SentimentResponse
	(*ChapterRequest)(nil),          // 16: media_analysis.ChapterRequest
	(*Chapter)(nil),                 // 17: media_analysis.Chapter
	(*ChapterResponse)(nil),         // 18: media_analysis.ChapterResponse
	(*SummaryRequest)(nil),          // 19: media_analysis.SummaryRequest
	(*SummaryResponse)(nil),         // 20: media_analysis.SummaryResponse
	(*ShortFormRequest)(nil),        // 21: media_analysis.ShortFormRequest
	(*ShortFormResponse)(nil),       // 22: media_analysis.ShortFormResponse
	(*ShortFormClip)(nil),           // 23: media_analysis.ShortFormClip
	(*QuoteExtractionRequest)(nil),  // 24: media_analysis.QuoteExtractionRequest
	(*Quote)(nil),                   // 25: media_analysis.Quote
	(*QuoteExtractionResponse)(nil), // 26: media_analysis.QuoteExtractionResponse
	(*MetadataRequest)(nil),         // 27: media_analysis.MetadataRequest
	(*Metadata)(nil),                // 28: media_analysis.Metadata
	(*MetadataResponse)(nil),        // 29: media_analysis.MetadataResponse
	(*SoundscapeRequest)(nil),       // 30: media_analysis.SoundscapeRequest
	(*SoundElement)(nil),            // 31: media_analysis.SoundElement
	(*SoundscapeResponse)(nil),      // 32: media_analysis.SoundscapeResponse
	(*EngagementRequest)(nil),       // 33: media_analysis.EngagementRequest
	(*EngagementMetrics)(nil),       // 34: media_analysis.EngagementMetrics
	(*EngagementResponse)(nil),      // 35: media_analysis.EngagementResponse
	(*FaceEmotionRequest)(nil),      // 36: media_analysis.FaceEmotionRequest
	(*FaceEmotion)(nil),             // 37: media_analysis.FaceEmotion
	(*FaceEmotionResponse)(nil),     // 38: media_analysis.FaceEmotionResponse
	(*ContentWarningRequest)(nil),   // 39: media_analysis.ContentWarningRequest
	(*ContentWarning)(nil),          // 40: media_analysis.ContentWarning
	(*ContentWarningResponse)(nil),  // 41: media_analysis.ContentWarningResponse
	nil,                             // 42: media_analysis.Metadata.TechnicalInfoEntry
	nil,                             // 43: media_analysis.SoundElement.AttributesEntry
	nil,                             // 44: media_analysis.FaceEmotion.EmotionScoresEntry
	nil,                             // 45: media_analysis.FaceEmotionResponse.PersonDescriptionsEntry
}
var file_protobuf_media_analysis_proto_depIdxs = []int32{
	0,  // 0: media_analysis.BaseRequest.media_type:type_name -> media_analysis.MediaType
	3,  // 1: media_analysis.TranscriptRequest.base:type_name -> media_analysis.BaseRequest
	3,  // 2: media_analysis.KeyMomentsRequest.base:type_name -> media_analysis.BaseRequest
	8,  // 3: media_analysis.KeyMomentsResponse.moments:type_name -> media_analysis.KeyMoment
	3,  // 4: media_analysis.TopicAnalysisRequest.base:type_name -> media_analysis.BaseRequest
	11, // 5: media_analysis.TopicAnalysisResponse.topics:type_name -> media_analysis.Topic
	3,  // 6: media_analysis.SentimentRequest.base:type_name -> media_analysis.BaseRequest
	14, // 7: media_analysis.SentimentResponse.segments:type_name -> media_analysis.SentimentSegment
	3,  // 8: media_analysis.ChapterRequest.base:type_name -> media_analysis.BaseRequest
	17, // 9: media_analysis.ChapterResponse.chapters:type_name -> media_analysis.Chapter
	3,  // 10: media_analysis.SummaryRequest.base:type_name -> media_analysis.BaseRequest
	2,  // 11: media_analysis.SummaryRequest.summary_type:type_name -> media_analysis.SummaryRequest.SummaryType
	3,  // 12: media_analysis.ShortFormRequest.base:type_name -> media_analysis.BaseRequest
	1,  // 13: media_analysis.ShortFormRequest.target_platforms:type_name -> media_analysis.Platform
	23, // 14: media_analysis.ShortFormResponse.clips:type_name -> media_analysis.ShortFormClip
	1,  // 15: media_analysis.ShortFormClip.recommended_platform:type_name -> media_analysis.Platform
	3,  // 16: media_analysis.QuoteExtractionRequest.base:type_name -> media_analysis.BaseRequest
	25, // 17: media_analysis.QuoteExtractionResponse.quotes:type_name -> media_analysis.Quote
	3,  // 18: media_analysis.MetadataRequest.base:type_name -> media_analysis.BaseRequest
	42, // 19: media_analysis.Metadata.technical_info:type_name -> media_analysis.Metadata.TechnicalInfoEntry
	28, // 20: media_analysis.MetadataResponse.metadata:type_name -> media_analysis.Metadata
	3,  // 21: media_analysis.SoundscapeRequest.base:type_name -> media_analysis.BaseRequest
	43, // 22: media_analysis.SoundElement.attributes:type_name -> media_analysis.SoundElement.AttributesEntry
	31, // 23: media_analysis.SoundscapeResponse.elements:type_name -> media_analysis.SoundElement
	3,  // 24: media_analysis.EngagementRequest.base:type_name -> media_analysis.BaseRequest
	34, // 25: media_analysis.EngagementResponse.segments:type_name -> media_analysis.EngagementMetrics
	3,  // 26: media_analysis.FaceEmotionRequest.base:type_name -> media_analysis.BaseRequest
	44, // 27: media_analysis.FaceEmotion.emotion_scores:type_name -> media_analysis.FaceEmotion.EmotionScoresEntry
	37, // 28: media_analysis.FaceEmotionResponse.emotions:type_name -> media_analysis.FaceEmotion
	45, // 29: media_analysis.FaceEmotionResponse.person_descriptions:type_name -> media_analysis.FaceEmotionResponse.PersonDescriptionsEntry
	3,  // 30: media_analysis.ContentWarningRequest.base:type_name -> media_analysis.BaseRequest
	40, // 31: media_analysis.ContentWarningResponse.warnings:type_name -> media_analysis.ContentWarning
	4,  // 32: media_analysis.MediaAnalysisService.GenerateTranscript:input_type -> media_analysis.TranscriptRequest
	7,  // 33: media_analysis.MediaAnalysisService.DetectKeyMoments:input_type -> media_analysis.KeyMomentsRequest
	10, // 34: media_analysis.MediaAnalysisService.AnalyzeTopics:input_type -> media_analysis.TopicAnalysisRequest
	13, // 35: media_analysis.MediaAnalysisService.AnalyzeSentiment:input_type -> media_analysis.SentimentRequest
	16, // 36: media_analysis.MediaAnalysisService.GenerateChapters:input_type -> media_analysis.ChapterRequest
	19, // 37: media_analysis.MediaAnalysisService.GenerateSummary:input_type -> media_analysis.SummaryRequest
	21, // 38: media_analysis.MediaAnalysisService.GenerateShortForm:input_type -> media_analysis.ShortFormRequest
	24, // 39: media_analysis.MediaAnalysisService.ExtractQuotes:input_type -> media_analysis.QuoteExtractionRequest
	27, // 40: media_analysis.MediaAnalysisService.GenerateMetadata:input_type -> media_analysis.MetadataRequest
	30, // 41: media_analysis.MediaAnalysisService.DetectSoundscape:input_type -> media_analysis.SoundscapeRequest
	33, // 42: media_analysis.MediaAnalysisService.AnalyzeEngagement:input_type -> media_analysis.EngagementRequest
	36, // 43: media_analysis.MediaAnalysisService.DetectFaceEmotions:input_type -> media_analysis.FaceEmotionRequest
	39, // 44: media_analysis.MediaAnalysisService.GenerateContentWarnings:input_type -> media_analysis.ContentWarningRequest
	5,  // 45: media_analysis.MediaAnalysisService.GenerateTranscript:output_type -> media_analysis.TranscriptResponse
	9,  // 46: media_analysis.MediaAnalysisService.DetectKeyMoments:output_type -> media_analysis.KeyMomentsResponse
	12, // 47: media_analysis.MediaAnalysisService.AnalyzeTopics:output_type -> media_analysis.TopicAnalysisResponse
	15, // 48: media_analysis.MediaAnalysisService.AnalyzeSentiment:output_type -> media_analysis.SentimentResponse
	18, // 49: media_analysis.MediaAnalysisService.GenerateChapters:output_type -> media_analysis.ChapterResponse
	20, // 50: media_analysis.MediaAnalysisService.GenerateSummary:output_type -> media_analysis.SummaryResponse
	22, // 51: media_analysis.MediaAnalysisService.GenerateShortForm:output_type -> media_analysis.ShortFormResponse
	26, // 52: media_analysis.MediaAnalysisService.ExtractQuotes:output_type -> media_analysis.QuoteExtractionResponse
	29, // 53: media_analysis.MediaAnalysisService.GenerateMetadata:output_type -> media_analysis.MetadataResponse
	32, // 54: media_analysis.MediaAnalysisService.DetectSoundscape:output_type -> media_analysis.SoundscapeResponse
	35, // 55: media_analysis.MediaAnalysisService.AnalyzeEngagement:output_type -> media_analysis.EngagementResponse
	38, // 56: media_analysis.MediaAnalysisService.DetectFaceEmotions:output_type -> media_analysis.FaceEmotionResponse
	41, // 57: media_analysis.MediaAnalysisService.GenerateContentWarnings:output_type -> media_analysis.ContentWarningResponse
	45, // [45:58] is the sub-list for method output_type
	32, // [32:45] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_protobuf_media_analysis_proto_init() }
func file_protobuf_media_analysis_proto_init() {
	if File_protobuf_media_analysis_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_media_analysis_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_media_analysis_proto_goTypes,
		DependencyIndexes: file_protobuf_media_analysis_proto_depIdxs,
		EnumInfos:         file_protobuf_media_analysis_proto_enumTypes,
		MessageInfos:      file_protobuf_media_analysis_proto_msgTypes,
	}.Build()
	File_protobuf_media_analysis_proto = out.File
	file_protobuf_media_analysis_proto_rawDesc = nil
	file_protobuf_media_analysis_proto_goTypes = nil
	file_protobuf_media_analysis_proto_depIdxs = nil
}
