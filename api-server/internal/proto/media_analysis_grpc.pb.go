// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: protobuf/media_analysis.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaAnalysisService_GenerateTranscript_FullMethodName      = "/media_analysis.MediaAnalysisService/GenerateTranscript"
	MediaAnalysisService_DetectKeyMoments_FullMethodName        = "/media_analysis.MediaAnalysisService/DetectKeyMoments"
	MediaAnalysisService_AnalyzeTopics_FullMethodName           = "/media_analysis.MediaAnalysisService/AnalyzeTopics"
	MediaAnalysisService_AnalyzeSentiment_FullMethodName        = "/media_analysis.MediaAnalysisService/AnalyzeSentiment"
	MediaAnalysisService_GenerateChapters_FullMethodName        = "/media_analysis.MediaAnalysisService/GenerateChapters"
	MediaAnalysisService_GenerateSummary_FullMethodName         = "/media_analysis.MediaAnalysisService/GenerateSummary"
	MediaAnalysisService_GenerateShortForm_FullMethodName       = "/media_analysis.MediaAnalysisService/GenerateShortForm"
	MediaAnalysisService_ExtractQuotes_FullMethodName           = "/media_analysis.MediaAnalysisService/ExtractQuotes"
	MediaAnalysisService_GenerateMetadata_FullMethodName        = "/media_analysis.MediaAnalysisService/GenerateMetadata"
	MediaAnalysisService_DetectSoundscape_FullMethodName        = "/media_analysis.MediaAnalysisService/DetectSoundscape"
	MediaAnalysisService_AnalyzeEngagement_FullMethodName       = "/media_analysis.MediaAnalysisService/AnalyzeEngagement"
	MediaAnalysisService_DetectFaceEmotions_FullMethodName      = "/media_analysis.MediaAnalysisService/DetectFaceEmotions"
	MediaAnalysisService_GenerateContentWarnings_FullMethodName = "/media_analysis.MediaAnalysisService/GenerateContentWarnings"
)

// MediaAnalysisServiceClient is the client API for MediaAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MediaAnalysisService provides various AI-powered analysis features for media content
type MediaAnalysisServiceClient interface {
	GenerateTranscript(ctx context.Context, in *TranscriptRequest, opts ...grpc.CallOption) (*TranscriptResponse, error)
	DetectKeyMoments(ctx context.Context, in *KeyMomentsRequest, opts ...grpc.CallOption) (*KeyMomentsResponse, error)
	AnalyzeTopics(ctx context.Context, in *TopicAnalysisRequest, opts ...grpc.CallOption) (*TopicAnalysisResponse, error)
	AnalyzeSentiment(ctx context.Context, in *SentimentRequest, opts ...grpc.CallOption) (*SentimentResponse, error)
	GenerateChapters(ctx context.Context, in *ChapterRequest, opts ...grpc.CallOption) (*ChapterResponse, error)
	GenerateSummary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
	GenerateShortForm(ctx context.Context, in *ShortFormRequest, opts ...grpc.CallOption) (*ShortFormResponse, error)
	ExtractQuotes(ctx context.Context, in *QuoteExtractionRequest, opts ...grpc.CallOption) (*QuoteExtractionResponse, error)
	GenerateMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error)
	DetectSoundscape(ctx context.Context, in *SoundscapeRequest, opts ...grpc.CallOption) (*SoundscapeResponse, error)
	AnalyzeEngagement(ctx context.Context, in *EngagementRequest, opts ...grpc.CallOption) (*EngagementResponse, error)
	DetectFaceEmotions(ctx context.Context, in *FaceEmotionRequest, opts ...grpc.CallOption) (*FaceEmotionResponse, error)
	GenerateContentWarnings(ctx context.Context, in *ContentWarningRequest, opts ...grpc.CallOption) (*ContentWarningResponse, error)
}

type mediaAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaAnalysisServiceClient(cc grpc.ClientConnInterface) MediaAnalysisServiceClient {
	return &mediaAnalysisServiceClient{cc}
}

func (c *mediaAnalysisServiceClient) GenerateTranscript(ctx context.Context, in *TranscriptRequest, opts ...grpc.CallOption) (*TranscriptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscriptResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_GenerateTranscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) DetectKeyMoments(ctx context.Context, in *KeyMomentsRequest, opts ...grpc.CallOption) (*KeyMomentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeyMomentsResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_DetectKeyMoments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) AnalyzeTopics(ctx context.Context, in *TopicAnalysisRequest, opts ...grpc.CallOption) (*TopicAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicAnalysisResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_AnalyzeTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) AnalyzeSentiment(ctx context.Context, in *SentimentRequest, opts ...grpc.CallOption) (*SentimentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentimentResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_AnalyzeSentiment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) GenerateChapters(ctx context.Context, in *ChapterRequest, opts ...grpc.CallOption) (*ChapterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChapterResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_GenerateChapters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) GenerateSummary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_GenerateSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) GenerateShortForm(ctx context.Context, in *ShortFormRequest, opts ...grpc.CallOption) (*ShortFormResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortFormResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_GenerateShortForm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) ExtractQuotes(ctx context.Context, in *QuoteExtractionRequest, opts ...grpc.CallOption) (*QuoteExtractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuoteExtractionResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_ExtractQuotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) GenerateMetadata(ctx context.Context, in *MetadataRequest, opts ...grpc.CallOption) (*MetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetadataResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_GenerateMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) DetectSoundscape(ctx context.Context, in *SoundscapeRequest, opts ...grpc.CallOption) (*SoundscapeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SoundscapeResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_DetectSoundscape_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) AnalyzeEngagement(ctx context.Context, in *EngagementRequest, opts ...grpc.CallOption) (*EngagementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EngagementResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_AnalyzeEngagement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) DetectFaceEmotions(ctx context.Context, in *FaceEmotionRequest, opts ...grpc.CallOption) (*FaceEmotionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FaceEmotionResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_DetectFaceEmotions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAnalysisServiceClient) GenerateContentWarnings(ctx context.Context, in *ContentWarningRequest, opts ...grpc.CallOption) (*ContentWarningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContentWarningResponse)
	err := c.cc.Invoke(ctx, MediaAnalysisService_GenerateContentWarnings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaAnalysisServiceServer is the server API for MediaAnalysisService service.
// All implementations must embed UnimplementedMediaAnalysisServiceServer
// for forward compatibility.
//
// MediaAnalysisService provides various AI-powered analysis features for media content
type MediaAnalysisServiceServer interface {
	GenerateTranscript(context.Context, *TranscriptRequest) (*TranscriptResponse, error)
	DetectKeyMoments(context.Context, *KeyMomentsRequest) (*KeyMomentsResponse, error)
	AnalyzeTopics(context.Context, *TopicAnalysisRequest) (*TopicAnalysisResponse, error)
	AnalyzeSentiment(context.Context, *SentimentRequest) (*SentimentResponse, error)
	GenerateChapters(context.Context, *ChapterRequest) (*ChapterResponse, error)
	GenerateSummary(context.Context, *SummaryRequest) (*SummaryResponse, error)
	GenerateShortForm(context.Context, *ShortFormRequest) (*ShortFormResponse, error)
	ExtractQuotes(context.Context, *QuoteExtractionRequest) (*QuoteExtractionResponse, error)
	GenerateMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error)
	DetectSoundscape(context.Context, *SoundscapeRequest) (*SoundscapeResponse, error)
	AnalyzeEngagement(context.Context, *EngagementRequest) (*EngagementResponse, error)
	DetectFaceEmotions(context.Context, *FaceEmotionRequest) (*FaceEmotionResponse, error)
	GenerateContentWarnings(context.Context, *ContentWarningRequest) (*ContentWarningResponse, error)
	mustEmbedUnimplementedMediaAnalysisServiceServer()
}

// UnimplementedMediaAnalysisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaAnalysisServiceServer struct{}

func (UnimplementedMediaAnalysisServiceServer) GenerateTranscript(context.Context, *TranscriptRequest) (*TranscriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTranscript not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) DetectKeyMoments(context.Context, *KeyMomentsRequest) (*KeyMomentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectKeyMoments not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) AnalyzeTopics(context.Context, *TopicAnalysisRequest) (*TopicAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeTopics not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) AnalyzeSentiment(context.Context, *SentimentRequest) (*SentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSentiment not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) GenerateChapters(context.Context, *ChapterRequest) (*ChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateChapters not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) GenerateSummary(context.Context, *SummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSummary not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) GenerateShortForm(context.Context, *ShortFormRequest) (*ShortFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortForm not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) ExtractQuotes(context.Context, *QuoteExtractionRequest) (*QuoteExtractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractQuotes not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) GenerateMetadata(context.Context, *MetadataRequest) (*MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMetadata not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) DetectSoundscape(context.Context, *SoundscapeRequest) (*SoundscapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectSoundscape not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) AnalyzeEngagement(context.Context, *EngagementRequest) (*EngagementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeEngagement not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) DetectFaceEmotions(context.Context, *FaceEmotionRequest) (*FaceEmotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectFaceEmotions not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) GenerateContentWarnings(context.Context, *ContentWarningRequest) (*ContentWarningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateContentWarnings not implemented")
}
func (UnimplementedMediaAnalysisServiceServer) mustEmbedUnimplementedMediaAnalysisServiceServer() {}
func (UnimplementedMediaAnalysisServiceServer) testEmbeddedByValue()                              {}

// UnsafeMediaAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaAnalysisServiceServer will
// result in compilation errors.
type UnsafeMediaAnalysisServiceServer interface {
	mustEmbedUnimplementedMediaAnalysisServiceServer()
}

func RegisterMediaAnalysisServiceServer(s grpc.ServiceRegistrar, srv MediaAnalysisServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaAnalysisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaAnalysisService_ServiceDesc, srv)
}

func _MediaAnalysisService_GenerateTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).GenerateTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_GenerateTranscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).GenerateTranscript(ctx, req.(*TranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_DetectKeyMoments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyMomentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).DetectKeyMoments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_DetectKeyMoments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).DetectKeyMoments(ctx, req.(*KeyMomentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_AnalyzeTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).AnalyzeTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_AnalyzeTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).AnalyzeTopics(ctx, req.(*TopicAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_AnalyzeSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).AnalyzeSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_AnalyzeSentiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).AnalyzeSentiment(ctx, req.(*SentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_GenerateChapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).GenerateChapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_GenerateChapters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).GenerateChapters(ctx, req.(*ChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_GenerateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).GenerateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_GenerateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).GenerateSummary(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_GenerateShortForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).GenerateShortForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_GenerateShortForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).GenerateShortForm(ctx, req.(*ShortFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_ExtractQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteExtractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).ExtractQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_ExtractQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).ExtractQuotes(ctx, req.(*QuoteExtractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_GenerateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).GenerateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_GenerateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).GenerateMetadata(ctx, req.(*MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_DetectSoundscape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundscapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).DetectSoundscape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_DetectSoundscape_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).DetectSoundscape(ctx, req.(*SoundscapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_AnalyzeEngagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).AnalyzeEngagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_AnalyzeEngagement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).AnalyzeEngagement(ctx, req.(*EngagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_DetectFaceEmotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaceEmotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).DetectFaceEmotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_DetectFaceEmotions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).DetectFaceEmotions(ctx, req.(*FaceEmotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAnalysisService_GenerateContentWarnings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentWarningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAnalysisServiceServer).GenerateContentWarnings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaAnalysisService_GenerateContentWarnings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAnalysisServiceServer).GenerateContentWarnings(ctx, req.(*ContentWarningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaAnalysisService_ServiceDesc is the grpc.ServiceDesc for MediaAnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaAnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media_analysis.MediaAnalysisService",
	HandlerType: (*MediaAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTranscript",
			Handler:    _MediaAnalysisService_GenerateTranscript_Handler,
		},
		{
			MethodName: "DetectKeyMoments",
			Handler:    _MediaAnalysisService_DetectKeyMoments_Handler,
		},
		{
			MethodName: "AnalyzeTopics",
			Handler:    _MediaAnalysisService_AnalyzeTopics_Handler,
		},
		{
			MethodName: "AnalyzeSentiment",
			Handler:    _MediaAnalysisService_AnalyzeSentiment_Handler,
		},
		{
			MethodName: "GenerateChapters",
			Handler:    _MediaAnalysisService_GenerateChapters_Handler,
		},
		{
			MethodName: "GenerateSummary",
			Handler:    _MediaAnalysisService_GenerateSummary_Handler,
		},
		{
			MethodName: "GenerateShortForm",
			Handler:    _MediaAnalysisService_GenerateShortForm_Handler,
		},
		{
			MethodName: "ExtractQuotes",
			Handler:    _MediaAnalysisService_ExtractQuotes_Handler,
		},
		{
			MethodName: "GenerateMetadata",
			Handler:    _MediaAnalysisService_GenerateMetadata_Handler,
		},
		{
			MethodName: "DetectSoundscape",
			Handler:    _MediaAnalysisService_DetectSoundscape_Handler,
		},
		{
			MethodName: "AnalyzeEngagement",
			Handler:    _MediaAnalysisService_AnalyzeEngagement_Handler,
		},
		{
			MethodName: "DetectFaceEmotions",
			Handler:    _MediaAnalysisService_DetectFaceEmotions_Handler,
		},
		{
			MethodName: "GenerateContentWarnings",
			Handler:    _MediaAnalysisService_GenerateContentWarnings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/media_analysis.proto",
}
